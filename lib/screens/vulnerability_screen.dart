import 'package:flutter/material.dart';
import 'dart:async';
import '../models/security_models.dart';
import '../services/network_security_service.dart' hide VulnerabilityResult;

class VulnerabilityScreen extends StatefulWidget {
  const VulnerabilityScreen({super.key});

  @override
  State<VulnerabilityScreen> createState() => _VulnerabilityScreenState();
}

class _VulnerabilityScreenState extends State<VulnerabilityScreen> {
  final TextEditingController _ipController = TextEditingController();
  bool _isScanning = false;
  List<VulnerabilityResult> _scanResults = [];
  String? _error;
  int? _expandedIndex;
  final NetworkSecurityService _securityService = NetworkSecurityService();

  @override
  void initState() {
    super.initState();
    _securityService.addVulnerabilityListener(_onVulnerabilitiesFound);
  }

  @override
  void dispose() {
    _ipController.dispose();
    _securityService.removeVulnerabilityListener(_onVulnerabilitiesFound);
    super.dispose();
  }

  void _onVulnerabilitiesFound(List<VulnerabilityResult> vulnerabilities) {
    setState(() {
      _scanResults.addAll(vulnerabilities);
    });
  }

  Future<void> _startScan() async {
    if (_isScanning) return;

    setState(() {
      _isScanning = true;
      _scanResults = [];
      _error = null;
      _expandedIndex = null;
    });

    try {
      final ip = _ipController.text;
      if (ip.isEmpty) {
        throw Exception('Please enter an IP address');
      }

      // Start real vulnerability scanning
      await _securityService.scanForVulnerabilities(ip);
    } catch (e) {
      setState(() {
        _error = e.toString();
      });
    } finally {
      setState(() {
        _isScanning = false;
      });
    }
  }

  void _stopScan() {
    setState(() {
      _isScanning = false;
    });
  }

  Color _getSeverityColor(String severity) {
    switch (severity.toLowerCase()) {
      case 'high':
        return Colors.red;
      case 'medium':
        return Colors.orange;
      case 'low':
        return Colors.yellow;
      default:
        return Colors.grey;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        AppBar(
          title: const Text('DarkNetX Vulnerability Scanner'),
          actions: [
            IconButton(
              icon: const Icon(Icons.info_outline),
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: const Text('About Vulnerability Scanning'),
                    content: const Text(
                      'Vulnerability scanning helps identify potential security weaknesses in your network. Use this tool responsibly and only on networks you own or have permission to scan.',
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: const Text('OK'),
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
        Expanded(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInputCard(),
                const SizedBox(height: 16),
                _buildScanResultsCard(),
                const SizedBox(height: 16),
                _buildVulnerabilityInfoCard(),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildInputCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _ipController,
              decoration: const InputDecoration(
                labelText: 'IP Address',
                hintText: 'Enter IP address to scan',
                border: OutlineInputBorder(),
              ),
              enabled: !_isScanning,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _isScanning ? _stopScan : _startScan,
              style: ElevatedButton.styleFrom(
                backgroundColor: _isScanning ? Colors.red : Colors.blue,
              ),
              child: Text(_isScanning ? 'Stop Scan' : 'Start Scan'),
            ),
            if (_error != null) ...[
              const SizedBox(height: 16),
              Text(
                _error!,
                style: const TextStyle(color: Colors.red),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildScanResultsCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Scan Results',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            if (_scanResults.isEmpty)
              const Center(
                child: Text('No scan results available'),
              )
            else
              Column(
                mainAxisSize: MainAxisSize.min,
                children: _scanResults
                    .map((result) => Card(
                          margin: const EdgeInsets.only(bottom: 8),
                          child: ExpansionTile(
                            leading: Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: _getSeverityColor(result.severity)
                                    .withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Icon(
                                Icons.bug_report,
                                color: _getSeverityColor(result.severity),
                              ),
                            ),
                            title: Text(result.title),
                            subtitle: Text(result.description),
                            trailing: Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 12,
                                vertical: 6,
                              ),
                              decoration: BoxDecoration(
                                color: _getSeverityColor(result.severity)
                                    .withOpacity(0.1),
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Text(
                                result.severity,
                                style: TextStyle(
                                  color: _getSeverityColor(result.severity),
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            ),
                            children: [
                              Container(
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  color: Colors.grey.shade50,
                                  borderRadius: const BorderRadius.vertical(
                                    bottom: Radius.circular(12),
                                  ),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Row(
                                      children: [
                                        Icon(
                                          Icons.description,
                                          size: 20,
                                          color: Colors.grey[600],
                                        ),
                                        const SizedBox(width: 8),
                                        Text(
                                          'Detailed Description',
                                          style: Theme.of(context)
                                              .textTheme
                                              .titleMedium
                                              ?.copyWith(
                                                color: Colors.grey[800],
                                              ),
                                        ),
                                      ],
                                    ),
                                    const SizedBox(height: 12),
                                    Text(
                                      result.detailedDescription,
                                      style: TextStyle(
                                        color: Colors.grey[700],
                                        height: 1.5,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ))
                    .toList(),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildVulnerabilityInfoCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Theme.of(context).primaryColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(
                    Icons.info_outline,
                    color: Theme.of(context).primaryColor,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    'Vulnerability Scanning Information',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                ),
              ],
            ),
            const Divider(height: 24),
            Text(
              'Vulnerability scanning helps identify potential security weaknesses in your network. Use this tool responsibly and only on networks you own or have permission to scan.',
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: 16),
            Text(
              'Common vulnerabilities include:',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            _buildVulnerabilityItem('Weak passwords and authentication'),
            _buildVulnerabilityItem('Outdated software and firmware'),
            _buildVulnerabilityItem('Misconfigured security settings'),
            _buildVulnerabilityItem('Unencrypted data transmission'),
            _buildVulnerabilityItem('Open ports and services'),
          ],
        ),
      ),
    );
  }

  Widget _buildVulnerabilityItem(String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(
            Icons.warning_amber_rounded,
            size: 16,
            color: Colors.orange.shade700,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              text,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }
}
